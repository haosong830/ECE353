


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;**********************************************
    8 00000000         ; SRAM
    9 00000000         ;**********************************************
   10 00000000                 AREA             SRAM, READWRITE
   11 00000000                 align
   12 00000000         
   13 00000000         ;**********************************************
   14 00000000         ; Constant Variables (FLASH) Segment
   15 00000000         ;**********************************************
   16 00000000                 AREA             FLASH, CODE, READONLY
   17 00000000                 align
   18 00000000         
   19 00000000         ;**********************************************
   20 00000000         ; Code (FLASH) Segment
   21 00000000         ; main assembly program
   22 00000000         ;**********************************************
   23 00000000         __main  PROC
   24 00000000         
   25 00000000         ; Initialization of R0 and R1
   26 00000000 F04F 000F       MOV              R0, #15
   27 00000004 F04F 0164       MOV              R1, #100
   28 00000008         
   29 00000008         ; Using only conditional instructions (no branches)
   30 00000008         ; Implement the if statemens below.
   31 00000008         
   32 00000008         ; Update the ASPR register
   33 00000008         ; Z = 1, N = 0, C = 0, V = 0
   34 00000008 280F            CMP              R0, #15
   35 0000000A         
   36 0000000A         
   37 0000000A         ; (1) If R0 == 15, then R2 = 100 , else R2 = 1
   38 0000000A BF0D 2264       MOVEQ            R2, #100
   39 0000000E 2201            MOVNE            R2, #1
   40 00000010         
   41 00000010         ; (2) If R0 != 15, then R3 = 200 , else R3 = 2
   42 00000010 23C8            MOVNE            R3, #200
   43 00000012 2302            MOVEQ            R3, #2
   44 00000014         
   45 00000014         
   46 00000014         ; (3) If R0 < 15, then  R4 = 300 , else R4 = 3
   47 00000014 BFB4 F44F 
              7496             MOVLT            R4, #300
   48 0000001A 2404            MOVGE            R4, #4
   49 0000001C         
   50 0000001C         ; (4) If R0 <= 15, then R5 = 400 , else R5 = 4
   51 0000001C BFD3 F44F 
              75C8             MOVLE            R5, #400
   52 00000022 2504            MOVGT            R5, #4
   53 00000024         
   54 00000024         ; (5) If R0 > 15,  then R6 =500 , else R6 = 5
   55 00000024 F44F 76FA       MOVGT            R6, #500
   56 00000028 2605            MOVLE            R6, #5
   57 0000002A         



ARM Macro Assembler    Page 2 


   58 0000002A         ; (6) If R0 >= 15, then R7 = 600 , else R7 = 6
   59 0000002A BFAC F44F 
              7716             MOVGE            R7, #600
   60 00000030 2706            MOVLT            R7, #6
   61 00000032         
   62 00000032         
   63 00000032 F04F 0002       MOV              R0, #0x2
   64 00000036         ; (7) Implement the following switch statement using onl
                       y conditional instructions
   65 00000036         
   66 00000036         ; Hint: Start by setting R1 to the default value and the
                       n checking all of the
   67 00000036         ; other cases.
   68 00000036         
   69 00000036         ; Z = 1, N = 0, C = 0, V = 0
   70 00000036         
   71 00000036         
   72 00000036         
   73 00000036         ; default case
   74 00000036 F64F 71FF 
              F6CF 71FF        MOV32            R1, #0xFFFFFFFF
   75 0000003E         
   76 0000003E         ; if R0 = 0
   77 0000003E 2800            CMP              R0, #0x0
   78 00000040 BF08 2100       MOVEQ            R1, #0x0
   79 00000044         
   80 00000044         ; if R0 = 1
   81 00000044 2801            CMP              R0, #0x1
   82 00000046 BF08 210A       MOVEQ            R1, #10
   83 0000004A         
   84 0000004A         ; if R0 = 2
   85 0000004A 2802            CMP              R0, #0x2
   86 0000004C BF08 2114       MOVEQ            R1, #20
   87 00000050         
   88 00000050         ; if R0 = 3
   89 00000050 2803            CMP              R0, #0x3
   90 00000052 BF08 211E       MOVEQ            R1, #30
   91 00000056         
   92 00000056         
   93 00000056         ; switch(R0)
   94 00000056         ; {
   95 00000056         ;      case 0:
   96 00000056         ;      {
   97 00000056         ;           R1 = 0;
   98 00000056         ;           break;
   99 00000056         ;      }
  100 00000056         ;      case 1:
  101 00000056         ;      {
  102 00000056         ;           R1 = 10;
  103 00000056         ;           break;
  104 00000056         ;      }
  105 00000056         ;      case 2:
  106 00000056         ;      {
  107 00000056         ;           R1 = 20;
  108 00000056         ;           break;
  109 00000056         ;      }
  110 00000056         ;      case 3:
  111 00000056         ;      {
  112 00000056         ;           R1 = 30;



ARM Macro Assembler    Page 3 


  113 00000056         ;           break;
  114 00000056         ;      }
  115 00000056         ;      default:
  116 00000056         ;      {
  117 00000056         ;           R1 = 0xFFFFFFFF;
  118 00000056         ;           break;
  119 00000056         ;      }
  120 00000056         ;  }
  121 00000056         
  122 00000056         
  123 00000056         
  124 00000056         ; Initialization of R0 and R1
  125 00000056 F04F 000F       MOV              R0, #15
  126 0000005A F04F 0164       MOV              R1, #100
  127 0000005E         
  128 0000005E         ; If A and B do this, else do that:
  129 0000005E         ; Do this
  130 0000005E         ; Do that if NOT A
  131 0000005E         ; Do that if NOT B
  132 0000005E         
  133 0000005E         ; If A or B do this, else do that:
  134 0000005E         ; Do that
  135 0000005E         ; Do this if  A
  136 0000005E         ; Do this if  B
  137 0000005E         
  138 0000005E         ; (8) If R0 >= 15 OR R1 < 150, then R8 = 700 , else R8 =
                        7
  139 0000005E         
  140 0000005E         ; Do the else statement first
  141 0000005E F04F 0807       MOV              R8, #7
  142 00000062         ; Do the if statement if the if statement IS true
  143 00000062 280F            CMP              R0, #15
  144 00000064 BFA8 F44F 
              782F             MOVGE            R8, #700
  145 0000006A         
  146 0000006A 2996            CMP              R1, #150
  147 0000006C BFB8 F44F 
              782F             MOVLT            R8, #700
  148 00000072         
  149 00000072         
  150 00000072         ; (9) If R0 >= 15 AND R1 < 150, then R9 = 800, else R9 =
                        8
  151 00000072         
  152 00000072         ; Do the if statement first
  153 00000072 F44F 7948       MOV              R9, #800
  154 00000076         ; do the else statements by checking if the if statement
                        is NOT true
  155 00000076 280F            CMP              R0, #15
  156 00000078 BFB8 F04F 
              0908             MOVLT            R9, #8
  157 0000007E         
  158 0000007E 2996            CMP              R1, #150
  159 00000080 BFA8 F04F 
              0908             MOVGE            R9, #8
  160 00000086         
  161 00000086         
  162 00000086 F240 00FF 
              F6CF 70F0        MOV32            R0, #0xFFF000FF
  163 0000008E         ; (10) If bit 2 OR bit 21 of register R0 is a 1, then R1



ARM Macro Assembler    Page 4 


                        = 900 , else R1 = 9
  164 0000008E         
  165 0000008E         ; Do the else statement first
  166 0000008E F04F 0109       MOV              R1, #9
  167 00000092         ; Do the if statement if the if statement IS true
  168 00000092 F010 0F04       TST              R0, #0x4
  169 00000096 F44F 7161       MOV              R1, #900
  170 0000009A         
  171 0000009A F410 1F00       TST              R0, #0x200000
  172 0000009E F44F 7161       MOV              R1, #900
  173 000000A2         
  174 000000A2         
  175 000000A2         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!! 
  176 000000A2         
  177 000000A2         INFINITE_LOOP
  178 000000A2 E7FE            B                INFINITE_LOOP
  179 000000A4         
  180 000000A4                 ENDP
  181 000000A4                 align
  182 000000A4         
  183 000000A4         
  184 000000A4                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\ece353_main.d -o.\obj\ece353_main.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4
C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --predefine=
"__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6
PM SETA 1" --list=.\lst\ece353_main.lst ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 10 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 16 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 000000A2

Symbol: INFINITE_LOOP
   Definitions
      At line 177 in file ece353_main.s
   Uses
      At line 178 in file ece353_main.s
Comment: INFINITE_LOOP used once
__main 00000000

Symbol: __main
   Definitions
      At line 23 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
3 symbols
339 symbols in table

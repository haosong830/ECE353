


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;******************************************
    8 00000000         ; Symbolic Constants
    9 00000000         ;****************************************** 
   10 00000000 00000004 
                       WORD    EQU              4
   11 00000000 00000002 
                       HALF_WORD
                               EQU              2
   12 00000000 00000001 
                       BYTE    EQU              1
   13 00000000         
   14 00000000         
   15 00000000         ;******************************************
   16 00000000         ; SRAM
   17 00000000         ;******************************************
   18 00000000                 AREA             SRAM, READWRITE
   19 00000000         ;******************************************
   20 00000000         ; Load Store Review
   21 00000000         ;******************************************
   22 00000000         
   23 00000000         
   24 00000000         ;******************************************
   25 00000000         ; Load Store Multiple
   26 00000000         ;******************************************
   27 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST_ARRAY
                               SPACE            32*WORD
   28 00000080 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST2_ARRAY
                               SPACE            32*WORD



ARM Macro Assembler    Page 3 


   29 00000100 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST3_ARRAY
                               SPACE            32*WORD
   30 00000180 00 00 00 
              00       RESULT  SPACE            1*WORD
   31 00000184                 align
   32 00000184         
   33 00000184         
   34 00000184         
   35 00000184         
   36 00000184         
   37 00000184         ;**********************************************
   38 00000184         ; FLASH
   39 00000184         ;**********************************************
   40 00000184                 AREA             FLASH, CODE, READONLY
   41 00000000         ;******************************************
   42 00000000         ; Load Store Review
   43 00000000         ;******************************************



ARM Macro Assembler    Page 4 


   44 00000000         
   45 00000000         
   46 00000000         ;******************************************
   47 00000000         ; Load Store Multiple
   48 00000000         ;******************************************
   49 00000000 00000000 
                       SRC_ARRAY
                               DCD              0x00000000
   50 00000004 00001111        DCD              0x00001111
   51 00000008 00002222        DCD              0x00002222
   52 0000000C 00003333        DCD              0x00003333
   53 00000010 00004444        DCD              0x00004444
   54 00000014 00005555        DCD              0x00005555
   55 00000018 00006666        DCD              0x00006666
   56 0000001C 00007777        DCD              0x00007777
   57 00000020 00008888        DCD              0x00008888
   58 00000024 00009999        DCD              0x00009999
   59 00000028 0000AAAA        DCD              0x0000AAAA
   60 0000002C 0000BBBB        DCD              0x0000BBBB
   61 00000030 0000CCCC        DCD              0x0000CCCC
   62 00000034 0000DDDD        DCD              0x0000DDDD
   63 00000038 0000EEEE        DCD              0x0000EEEE
   64 0000003C 0000FFFF        DCD              0x0000FFFF
   65 00000040 11110000        DCD              0x11110000
   66 00000044 11111111        DCD              0x11111111
   67 00000048 11112222        DCD              0x11112222
   68 0000004C 11113333        DCD              0x11113333
   69 00000050 11114444        DCD              0x11114444
   70 00000054 11115555        DCD              0x11115555
   71 00000058 11116666        DCD              0x11116666
   72 0000005C 11117777        DCD              0x11117777
   73 00000060 11118888        DCD              0x11118888
   74 00000064 11119999        DCD              0x11119999
   75 00000068 1111AAAA        DCD              0x1111AAAA
   76 0000006C 1111BBBB        DCD              0x1111BBBB
   77 00000070 1111CCCC        DCD              0x1111CCCC
   78 00000074 1111DDDD        DCD              0x1111DDDD
   79 00000078 1111EEEE        DCD              0x1111EEEE
   80 0000007C 1111FFFF        DCD              0x1111FFFF
   81 00000080         
   82 00000080         
   83 00000080 45 43 45 
              33 35 33 ASCII_ARRAY
                               DCB              "ECE353"
   84 00000086 00              DCB              0           ; terminate string
   85 00000087         
   86 00000087         align
   87 00000087         
   88 00000087         
   89 00000087         
   90 00000087         ;**********************************************
   91 00000087         ; Code (FLASH) Segment
   92 00000087         ; main assembly program
   93 00000087         ;**********************************************
   94 00000087         __main  PROC
   95 00000087         
   96 00000087         ;******************************************
   97 00000087         ; Load Store Review
   98 00000087         ;******************************************



ARM Macro Assembler    Page 5 


   99 00000087         
  100 00000087         ; load the address of ASCII_ARRAY into R0
  101 00000087 00 F2AF 
              000C             ADR              R0, ASCII_ARRAY
  102 0000008C         
  103 0000008C         ; load the address of result into R1
  104 0000008C 4920            LDR              R1, =(RESULT)
  105 0000008E         
  106 0000008E F04F 0300       MOV              R3, #0x0    ; initialize sum
  107 00000092         LOOP
  108 00000092 F810 2B01       LDRB             R2, [R0], #1 ; first , load the
                                                             byte in
  109 00000096 2A00            CMP              R2, #0x0    ; check if R2 is 0x
                                                            0
  110 00000098 D005            BEQ              ENDLOOP     ; if it is, exit lo
                                                            op
  111 0000009A F1A2 0230       SUB              R2, R2, #0x30 ; subtract 30 fro
                                                            m hex value for the
                                                             ASCII character
  112 0000009E 2A09            CMP              R2, #0x9    ; if (R2-30) is in 
                                                            the range 0-9, N fl
                                                            ag will be set
  113 000000A0 BFD8 189B       ADDLE            R3, R3, R2  ; if condition met,
                                                             add to sum 
  114 000000A4 E7F5            B                LOOP
  115 000000A6         ENDLOOP
  116 000000A6         
  117 000000A6 600B            STR              R3, [R1]    ; store sum into RE
                                                            SULT 
  118 000000A8         
  119 000000A8         
  120 000000A8         ;******************************************
  121 000000A8         ; Load Store Multiple
  122 000000A8         ;******************************************
  123 000000A8         ; Load the address of SRC_ARRAY into R0
  124 000000A8 F2AF 00AC       ADR              R0, SRC_ARRAY
  125 000000AC         
  126 000000AC         
  127 000000AC         ; Load the address of DEST_ARRAY into R1
  128 000000AC 4919            LDR              R1, =(DEST_ARRAY)
  129 000000AE         
  130 000000AE         
  131 000000AE         ; Load the address of DEST2_ARRAY into R2
  132 000000AE 4A1A            LDR              R2, =(DEST2_ARRAY)
  133 000000B0         
  134 000000B0         
  135 000000B0         ; Using LDM, load the first 8 WORDs in SRC_ARRAY
  136 000000B0         ; Use Registers R3-R10 as the destination 
  137 000000B0         ; of the LDM instruction
  138 000000B0 E890 07F8       LDM              R0, {R3-R10}
  139 000000B4         
  140 000000B4         
  141 000000B4         ; Use STM to store R3-R10 to DEST_ARRAY
  142 000000B4 E881 07F8       STM              R1, {R3-R10}
  143 000000B8         
  144 000000B8         
  145 000000B8         ; Use STM to store R3-R10 to DEST2_ARRAY
  146 000000B8         ; Specify the order of the registers in
  147 000000B8         ; revers order (STM R2, {R10, R9, R8, R7, R6, R5, R4, R3



ARM Macro Assembler    Page 6 


                       })
  148 000000B8         ; Observe if the order of the registers changes
  149 000000B8         ; how the data arranged in SRAM
  150 000000B8 E882 07F8       STM              R2, {R10, R9, R8, R7, R6, R5, R
4, R3}
  151 000000BC         
  152 000000BC         
  153 000000BC         
  154 000000BC         ; Using LDM, load the second 8 WORDs in SRC_ARRAY
  155 000000BC         ; Use Registers R3-R10 as the destination 
  156 000000BC         ; of the LDM instruction.
  157 000000BC         ; Hint, you will need to modify R0 so that
  158 000000BC         ; it contains the address of SRC_ARRAY[8]
  159 000000BC         
  160 000000BC F100 0020       ADD              R0, R0, #32
  161 000000C0 E890 07F8       LDM              R0, {R3-R10}
  162 000000C4         
  163 000000C4         
  164 000000C4         ; Use STM to store R3-R10 to DEST_ARRAY[8]
  165 000000C4         ; Hint, you will need to modify R1 so that
  166 000000C4         ; it contains the address of DEST_ARRAY[8]
  167 000000C4         
  168 000000C4 F101 0120       ADD              R1, R1, #32
  169 000000C8 E881 07F8       STM              R1, {R3-R10}
  170 000000CC         
  171 000000CC         
  172 000000CC         ; Copy the contents of SRC_ARRAY to DEST2_ARRAY
  173 000000CC         ; 8 WORDs at a time using LDM/STM. This time use
  174 000000CC         ; the version of LDM/STM that updates the base address
  175 000000CC         ; Load the address of SRC_ARRAY into R0
  176 000000CC         
  177 000000CC         ; R0 <- ADDR[SRC_ARRAY[0]]
  178 000000CC F1A0 0020       SUB              R0, R0, #32
  179 000000D0         
  180 000000D0         ;#############################
  181 000000D0         ; load first 8 words
  182 000000D0         ; R0 <- R0 + 32
  183 000000D0 E8B0 07F8       LDM              R0!, {R3-R10}
  184 000000D4         
  185 000000D4         ; store first 8 words into DEST2_ARRAY
  186 000000D4         ; R2 <- R2 + 32
  187 000000D4 E8A2 07F8       STM              R2!, {R3-R10}
  188 000000D8         
  189 000000D8         ;#############################
  190 000000D8         ; load second 8 words
  191 000000D8         ; R0 <- R0 + 32
  192 000000D8 E8B0 07F8       LDM              R0!, {R3-R10}
  193 000000DC         
  194 000000DC         ; store second 8 words into DEST2_ARRAY
  195 000000DC         ; R2 <- R2 + 32
  196 000000DC E8A2 07F8       STM              R2!, {R3-R10}
  197 000000E0         
  198 000000E0         ;#############################
  199 000000E0         ; load third 8 words
  200 000000E0         ; R0 <- R0 + 32
  201 000000E0 E8B0 07F8       LDM              R0!, {R3-R10}
  202 000000E4         
  203 000000E4         ; store third 8 words into DEST2_ARRAY
  204 000000E4         ; R2 <- R2 + 32



ARM Macro Assembler    Page 7 


  205 000000E4 E8A2 07F8       STM              R2!, {R3-R10}
  206 000000E8         
  207 000000E8         ;#############################
  208 000000E8         ; load fourth 8 words
  209 000000E8         ; R0 <- R0 + 32
  210 000000E8 E8B0 07F8       LDM              R0!, {R3-R10}
  211 000000EC         
  212 000000EC         ; store fourth 8 words into DEST2_ARRAY
  213 000000EC         ; R2 <- R2 + 32
  214 000000EC E8A2 07F8       STM              R2!, {R3-R10}
  215 000000F0         
  216 000000F0         
  217 000000F0         
  218 000000F0         ; Write code that uses a loop to copy SRC_ARRAY
  219 000000F0         ; to DEST3_ARRAY.  Each iteration of the loop should
  220 000000F0         ; copy 4 WORDs of the array
  221 000000F0         
  222 000000F0         ; Load the address of SRC_ARRAY into R0
  223 000000F0 F2AF 00F4       ADR              R0, SRC_ARRAY
  224 000000F4         
  225 000000F4         ; Load the address of DEST3_ARRAY into R11
  226 000000F4 F8DF B024       LDR              R11, =(DEST3_ARRAY)
  227 000000F8         
  228 000000F8         ; initialize loop counter 
  229 000000F8 F04F 0C00       MOV              R12, #0x0
  230 000000FC         
  231 000000FC         FOR_START
  232 000000FC F1BC 0F08       CMP              R12, #0x8
  233 00000100 D005            BEQ              FOR_END
  234 00000102 C878            LDM              R0!, {R3-R6}
  235 00000104 E8AB 0078       STM              R11!, {R3-R6}
  236 00000108 F10C 0C01       ADD              R12, R12, #0x1
  237 0000010C E7F6            B                FOR_START
  238 0000010E         FOR_END
  239 0000010E         
  240 0000010E         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!!
  241 0000010E         
  242 0000010E         INFINITE_LOOP
  243 0000010E E7FE            B                INFINITE_LOOP
  244 00000110         
  245 00000110                 ENDP
  246 00000110                 align
  247 00000110         
  248 00000110         
  249 00000110                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\ece353_main.d -o.\obj\ece353_main.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4
C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --predefine=
"__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6
PM SETA 1" --list=.\lst\ece353_main.lst ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DEST2_ARRAY 00000080

Symbol: DEST2_ARRAY
   Definitions
      At line 28 in file ece353_main.s
   Uses
      At line 132 in file ece353_main.s
Comment: DEST2_ARRAY used once
DEST3_ARRAY 00000100

Symbol: DEST3_ARRAY
   Definitions
      At line 29 in file ece353_main.s
   Uses
      At line 226 in file ece353_main.s
Comment: DEST3_ARRAY used once
DEST_ARRAY 00000000

Symbol: DEST_ARRAY
   Definitions
      At line 27 in file ece353_main.s
   Uses
      At line 128 in file ece353_main.s
Comment: DEST_ARRAY used once
RESULT 00000180

Symbol: RESULT
   Definitions
      At line 30 in file ece353_main.s
   Uses
      At line 104 in file ece353_main.s
Comment: RESULT used once
SRAM 00000000

Symbol: SRAM
   Definitions
      At line 18 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASCII_ARRAY 00000080

Symbol: ASCII_ARRAY
   Definitions
      At line 83 in file ece353_main.s
   Uses
      At line 101 in file ece353_main.s
Comment: ASCII_ARRAY used once
ENDLOOP 000000A6

Symbol: ENDLOOP
   Definitions
      At line 115 in file ece353_main.s
   Uses
      At line 110 in file ece353_main.s
Comment: ENDLOOP used once
FLASH 00000000

Symbol: FLASH
   Definitions
      At line 40 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
FOR_END 0000010E

Symbol: FOR_END
   Definitions
      At line 238 in file ece353_main.s
   Uses
      At line 233 in file ece353_main.s
Comment: FOR_END used once
FOR_START 000000FC

Symbol: FOR_START
   Definitions
      At line 231 in file ece353_main.s
   Uses
      At line 237 in file ece353_main.s
Comment: FOR_START used once
INFINITE_LOOP 0000010E

Symbol: INFINITE_LOOP
   Definitions
      At line 242 in file ece353_main.s
   Uses
      At line 243 in file ece353_main.s
Comment: INFINITE_LOOP used once
LOOP 00000092

Symbol: LOOP
   Definitions
      At line 107 in file ece353_main.s
   Uses
      At line 114 in file ece353_main.s
Comment: LOOP used once
SRC_ARRAY 00000000

Symbol: SRC_ARRAY



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 49 in file ece353_main.s
   Uses
      At line 124 in file ece353_main.s
      At line 223 in file ece353_main.s

__main 00000087

Symbol: __main
   Definitions
      At line 94 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
align 00000087

Symbol: align
   Definitions
      At line 86 in file ece353_main.s
   Uses
      None
Comment: align unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BYTE 00000001

Symbol: BYTE
   Definitions
      At line 12 in file ece353_main.s
   Uses
      None
Comment: BYTE unused
HALF_WORD 00000002

Symbol: HALF_WORD
   Definitions
      At line 11 in file ece353_main.s
   Uses
      None
Comment: HALF_WORD unused
WORD 00000004

Symbol: WORD
   Definitions
      At line 10 in file ece353_main.s
   Uses
      At line 27 in file ece353_main.s
      At line 28 in file ece353_main.s
      At line 29 in file ece353_main.s
      At line 30 in file ece353_main.s

3 symbols
355 symbols in table

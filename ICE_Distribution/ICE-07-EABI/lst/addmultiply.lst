


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     addMultiply.s 
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           addMultiply
    6 00000000         
    7 00000000         ;**********************************************
    8 00000000         ; SRAM
    9 00000000         ;**********************************************
   10 00000000                 AREA             SRAM, READWRITE
   11 00000000                 align
   12 00000000         
   13 00000000         ;**********************************************
   14 00000000         ; Constant Variables (FLASH) Segment
   15 00000000         ;**********************************************
   16 00000000                 AREA             FLASH, CODE, READONLY
   17 00000000                 align
   18 00000000         
   19 00000000         
   20 00000000         ;**********************************************
   21 00000000         ; Four arrays of 8-bit signed numbers are 
   22 00000000         ; passed via the first four parameters.
   23 00000000         ; The 5th paramter indicates the length of the
   24 00000000         ; arrays. For each entry in the array, the
   25 00000000         ; following operation takes place.
   26 00000000         ;
   27 00000000         ; Array3[i] = (Array0[i] + Array1[i]) * Array2[i]
   28 00000000         ;
   29 00000000         ; Parameter 0       Array Address 0
   30 00000000         ; Parameter 1       Array Address 1
   31 00000000         ; Parameter 2       Array Address 2
   32 00000000         ; Parameter 3       Array Address 3
   33 00000000         ; Parameter 4       Array Size 
   34 00000000         ;
   35 00000000         ; Returns
   36 00000000         ;   if ALL parameters are valid, return 0
   37 00000000         ;   else return -1.
   38 00000000         ;
   39 00000000         ;  An address is valid if it is non zero
   40 00000000         ;  The size is valid if it is greater than zero
   41 00000000         ;**********************************************
   42 00000000         addMultiply
                               PROC
   43 00000000         
   44 00000000         ; R0 = Array Address 0
   45 00000000         ; R1 = Array Address 1
   46 00000000         ; R2 = Array Address 2
   47 00000000         ; R3 = Array Address 3
   48 00000000         
   49 00000000         ; Validate Address Parameters (nonzero)
   50 00000000 2800            CMP              R0, #0
   51 00000002 BF08 F04F 
              30FF             MOVEQ            R0, #-1
   52 00000008 D027            BEQ              invalid_parameter
   53 0000000A         
   54 0000000A 2900            CMP              R1, #0
   55 0000000C BF08 F04F 
              30FF             MOVEQ            R0, #-1
   56 00000012 D022            BEQ              invalid_parameter



ARM Macro Assembler    Page 2 


   57 00000014         
   58 00000014 2A00            CMP              R2, #0
   59 00000016 BF08 F04F 
              30FF             MOVEQ            R0, #-1
   60 0000001C D01D            BEQ              invalid_parameter
   61 0000001E         
   62 0000001E 2B00            CMP              R3, #0
   63 00000020 BF08 F04F 
              30FF             MOVEQ            R0, #-1
   64 00000026 D018            BEQ              invalid_parameter
   65 00000028         
   66 00000028         
   67 00000028         
   68 00000028         
   69 00000028         
   70 00000028         ; Must save anything besides R0-R3. Caller must save R0-
                       R3
   71 00000028         ; R4 will hold the array size
   72 00000028         ; R5 will hold Array0[i] and the sum of Array0 and Array
                       1 and the product of the sum and Array2
   73 00000028         ; R6 will hold Array1[i]
   74 00000028         ; R7 will hold Array2[i]
   75 00000028 B4F0            PUSH             {R4-R7}
   76 0000002A         
   77 0000002A         ; Get 5th parameter
   78 0000002A 9C00            LDR              R4, [SP, #0]
   79 0000002C         ; Validate Size Parameter (greater than zero)
   80 0000002C 2C00            CMP              R4, #0
   81 0000002E BFD8 F04F 
              30FF             MOVLE            R0, #-1
   82 00000034 D00F            BEQ              array_loop_end
   83 00000036         
   84 00000036         
   85 00000036         
   86 00000036         ; For each index in the arrays, compute  
   87 00000036         ; Array3[i] = (Array0[i] + Array1[i]) * Array2[i]
   88 00000036         array_loop_begin
   89 00000036         ; compare array size to 0
   90 00000036 2C00            CMP              R4, #0
   91 00000038 D00D            BEQ              array_loop_end
   92 0000003A         
   93 0000003A         ; since each entry is 8 bits, only have to offset 
   94 0000003A         ; by 1 byte each time. No shifting of i necessary
   95 0000003A         ; load array values. Signed values
   96 0000003A F910 5B01       LDRSB            R5, [R0], #1
   97 0000003E F911 6B01       LDRSB            R6, [R1], #1
   98 00000042 F912 7B01       LDRSB            R7, [R2], #1
   99 00000046         
  100 00000046         ;(Array0[i] + Array1[i])
  101 00000046 4435            ADD              R5, R5, R6
  102 00000048         ;(Array0[i] + Array1[i]) * Array2[i]
  103 00000048 FB05 F507       MUL              R5, R5, R7
  104 0000004C         
  105 0000004C         ; store result in Array3[i]
  106 0000004C F843 5B01       STR              R5, [R3], #1
  107 00000050         
  108 00000050         ; decrement size of array
  109 00000050 F1A4 0401       SUB              R4, R4, #1
  110 00000054         ; keep looping



ARM Macro Assembler    Page 3 


  111 00000054 E7EF            B                array_loop_begin
  112 00000056         array_loop_end
  113 00000056         ; valid return value
  114 00000056 F04F 0000       MOV              R0, #0
  115 0000005A         ; if any parameters were invalid, R0 won't be set to 0
  116 0000005A         invalid_parameter
  117 0000005A         
  118 0000005A         ; Restore registers saved to the stack
  119 0000005A E8BD 01F0       POP              {R4-R8}
  120 0000005E         
  121 0000005E         ; valid return value
  122 0000005E         
  123 0000005E         ; Return from the loop
  124 0000005E 4770            BX               LR
  125 00000060         
  126 00000060         
  127 00000060                 ENDP
  128 00000060         
  129 00000060                 align
  130 00000060         
  131 00000060         
  132 00000060                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\addmultiply.d -o.\obj\addmultiply.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4
C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --predefine=
"__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6
PM SETA 1" --list=.\lst\addmultiply.lst addMultiply.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 10 in file addMultiply.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 16 in file addMultiply.s
   Uses
      None
Comment: FLASH unused
addMultiply 00000000

Symbol: addMultiply
   Definitions
      At line 42 in file addMultiply.s
   Uses
      At line 5 in file addMultiply.s
Comment: addMultiply used once
array_loop_begin 00000036

Symbol: array_loop_begin
   Definitions
      At line 88 in file addMultiply.s
   Uses
      At line 111 in file addMultiply.s
Comment: array_loop_begin used once
array_loop_end 00000056

Symbol: array_loop_end
   Definitions
      At line 112 in file addMultiply.s
   Uses
      At line 82 in file addMultiply.s
      At line 91 in file addMultiply.s

invalid_parameter 0000005A

Symbol: invalid_parameter
   Definitions
      At line 116 in file addMultiply.s
   Uses
      At line 52 in file addMultiply.s
      At line 56 in file addMultiply.s
      At line 60 in file addMultiply.s
      At line 64 in file addMultiply.s

5 symbols
341 symbols in table
